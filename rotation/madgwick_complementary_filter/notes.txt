Sanity Checks --

Basic Madgwick Complementary Filter --
  Zero rotation. Converges.
  1-Axis Rotation. Converges for x,y,z
    the non-zero 'x' magnetic field requirement is crucial
    the derivation of the simplified gradient assumes this
    if you have a 'y' component but no 'x' then only the z matters...
    and if you have a zero z component... it doesn't matter how you rotate there.
    it would look like the magnetic field didn't matter.
  3D Rotation.
    Converges without noise.

MCF with Magnetic Distortion Compensation --
  3D Rotation
    Converges without noise within 40 frames at 100Hz (0.5s) then stays locked.

MCF + MDC + Gyro Bias Estimation --
  3D Rotation
    Converges without noise within 40 frames at 100Hz (0.5s) then stays locked.

Add in zero mean gyro noise to the tune of 3 degrees per second per axis, iid.
  3D Rotation
    Converges without noise within 40 frames at 100Hz (0.5s) then stays locked.

Add in zero mean gyro noise to the tune of 180 degrees per second per axis, iid.
  3D Rotation
    Converges but is buffetted about by noise throughout the simulation.

Add in gyro bias
  3D Rotation
    Converges for bias even up to the 180 dps range iid in all axes.
    Beta, Zeta BOTH need to be tuned to match the scale of spread, bias, of course.

Add in zero mean compass noise (10%)
Add in zero mean accel noise (5%)
  3D Rotation
    MDC really helps since accel noise (for now) is < compass noise.
    Converges for beta around pi/2. Kind of makes sense.
    w_e error is like w_b error. w_e error makes us move further from the truth.
    we then want to converge quickly if we get a better measurement.

Probably worth refactoring here to move us to an iterative computation model instead of an operate on whole-time-series model. To better simulate COM acceleration. May as well write the simulator now so you can put in, say, an oscillating net torque.
  Done! See Drone/simulator.

Write out a simple drone mechanics model
  Done! See Drone/simulator for derivation and testing.

Simulate it (torques in free_body input step-by-step instead as identically zero)
  Done! See Drone/simulator for testing.

Show me inertial drift (does need to be animated) to understand the delay, error timescale and the error scale. You can update the base point of the vectors to do this.
  Done! See Drone/simulator. O(1s) yields 0.5-2 meter drift.

Simulate a PD controller for a simplified model where you have perfect control over torque and perfect sampling.
  Done! See Drone/simulator/kiss.py.

Simulate a PID controller with kp >> kd >>> ki and torque-through-motor-drive.

Add in time jitter, buffering delay, and interpolation error

KISS. Push for first flight to verify assumptions with data.
  Mechanical (3D print for our batteries).
  Electrical (drive, safety, 2s motors -> bom -> pcb)
  FW (drivers, controller, logger, tools)

Linearize the full model about the horizontal. Design your PID controller now that the model is trusted.

Add heuristics for hovering if possible.

Write it up!

Think about what you want to do next.
